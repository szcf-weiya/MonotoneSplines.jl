var documenterSearchIndex = {"docs":
[{"location":"examples/monofit/","page":"Monotone Fitting","title":"Monotone Fitting","text":"EditURL = \"<unknown>/../examples/monofit.jl\"","category":"page"},{"location":"examples/monofit/","page":"Monotone Fitting","title":"Monotone Fitting","text":"using MonotoneSplines\nusing Plots\nusing Random\nusing RCall","category":"page"},{"location":"examples/monofit/#Cubic-Curve","page":"Monotone Fitting","title":"Cubic Curve","text":"","category":"section"},{"location":"examples/monofit/","page":"Monotone Fitting","title":"Monotone Fitting","text":"n = 100\nseed = 1234\nσ = 0.2\nRandom.seed!(seed)\nx = rand(n) * 2 .- 1\ny = x .^3 + randn(n) * σ\nλs = exp.(range(-10, -4, length = 100));\nnothing #hide","category":"page"},{"location":"examples/monofit/","page":"Monotone Fitting","title":"Monotone Fitting","text":"Perform cross-validation for monotone fitting with smoothing splines,","category":"page"},{"location":"examples/monofit/","page":"Monotone Fitting","title":"Monotone Fitting","text":"@time errs, B, L, J = MonotoneSplines.cv_mono_ss(x, y, λs)","category":"page"},{"location":"examples/monofit/","page":"Monotone Fitting","title":"Monotone Fitting","text":"Then plot the CV curve","category":"page"},{"location":"examples/monofit/","page":"Monotone Fitting","title":"Monotone Fitting","text":"scatter(log.(λs), errs, title = \"seed = $seed\")","category":"page"},{"location":"examples/monofit/","page":"Monotone Fitting","title":"Monotone Fitting","text":"Then we can choose λ which minimized the CV error.","category":"page"},{"location":"examples/monofit/","page":"Monotone Fitting","title":"Monotone Fitting","text":"idx = argmin(errs)\nλopt = λs[idx]","category":"page"},{"location":"examples/monofit/","page":"Monotone Fitting","title":"Monotone Fitting","text":"Fit with λopt","category":"page"},{"location":"examples/monofit/","page":"Monotone Fitting","title":"Monotone Fitting","text":"βhat = MonotoneSplines.mono_ss(B, y, L, J, λopt);\nnothing #hide","category":"page"},{"location":"examples/monofit/","page":"Monotone Fitting","title":"Monotone Fitting","text":"Alternatively,","category":"page"},{"location":"examples/monofit/","page":"Monotone Fitting","title":"Monotone Fitting","text":"βhat, yhat = MonotoneSplines.mono_ss(x, y, λopt);\nnothing #hide","category":"page"},{"location":"examples/monofit/","page":"Monotone Fitting","title":"Monotone Fitting","text":"Plot it","category":"page"},{"location":"examples/monofit/","page":"Monotone Fitting","title":"Monotone Fitting","text":"scatter(x, y)\nscatter!(x, yhat)","category":"page"},{"location":"examples/monofit/","page":"Monotone Fitting","title":"Monotone Fitting","text":"We can also compare it with smooth.spline,","category":"page"},{"location":"examples/monofit/","page":"Monotone Fitting","title":"Monotone Fitting","text":"spl = R\"smooth.spline($x, $y)\"","category":"page"},{"location":"examples/monofit/","page":"Monotone Fitting","title":"Monotone Fitting","text":"it also determine λ by cross-validation,","category":"page"},{"location":"examples/monofit/","page":"Monotone Fitting","title":"Monotone Fitting","text":"λ = rcopy(R\"$spl$lambda\")","category":"page"},{"location":"examples/monofit/","page":"Monotone Fitting","title":"Monotone Fitting","text":"we can plot its fitting values together,","category":"page"},{"location":"examples/monofit/","page":"Monotone Fitting","title":"Monotone Fitting","text":"yhat_ss = rcopy(R\"predict($spl, $x)$y\")\nscatter!(x, yhat_ss)","category":"page"},{"location":"examples/monofit/","page":"Monotone Fitting","title":"Monotone Fitting","text":"For ease of demonstrating other examples, we wrap up the above procedures as functions","category":"page"},{"location":"examples/monofit/","page":"Monotone Fitting","title":"Monotone Fitting","text":"function demo_mono_ss(x, y, λs)\n    errs, B, L, J = MonotoneSplines.cv_mono_ss(x, y, λs)\n    fig1 = plot(log.(λs), errs, xlab = \"λ\", ylab = \"CV error\", legend=false)\n    λopt = λs[argmin(errs)]\n    λ_mono_ss = [round(λopt, sigdigits = 4), round(log(λopt), sigdigits=4)]\n    βhat, yhat = MonotoneSplines.mono_ss(x, y, λopt)\n    fig2 = scatter(x, y, label = \"obs.\")\n    scatter!(fig2, x, yhat, label = \"mono_ss (λ = $(λ_mono_ss[1]), logλ = $(λ_mono_ss[2]))\")\n    # ss\n    spl = R\"smooth.spline($x, $y)\"\n    λ = rcopy(R\"$spl$lambda\")\n    λ_ss = [round(λ, sigdigits = 4), round(log(λ), sigdigits=4)]\n    yhat_ss = rcopy(R\"predict($spl, $x)$y\")\n    scatter!(fig2, x, yhat_ss, label = \"ss (λ = $(λ_ss[1]), logλ = $(λ_ss[2]))\")\n    return plot(fig1, fig2, size = (1240, 420))\nend","category":"page"},{"location":"examples/monofit/#Growth-Curve","page":"Monotone Fitting","title":"Growth Curve","text":"","category":"section"},{"location":"examples/monofit/","page":"Monotone Fitting","title":"Monotone Fitting","text":"λs = exp.(range(-10, 0, length = 100));\nnothing #hide","category":"page"},{"location":"examples/monofit/#σ-3.0","page":"Monotone Fitting","title":"σ = 3.0","text":"","category":"section"},{"location":"examples/monofit/","page":"Monotone Fitting","title":"Monotone Fitting","text":"σ = 3.0\nRandom.seed!(seed)\nx, y, x0, y0 = MonotoneSplines.gen_data(n, σ, z->1/(1-0.42log(z)), xmin = 0, xmax = 10)\nscatter(x, y)\nscatter!(x0, y0)\n\ndemo_mono_ss(x, y, λs)","category":"page"},{"location":"examples/monofit/#σ-2.0","page":"Monotone Fitting","title":"σ = 2.0","text":"","category":"section"},{"location":"examples/monofit/","page":"Monotone Fitting","title":"Monotone Fitting","text":"σ = 2.0\nRandom.seed!(seed)\nx, y, x0, y0 = MonotoneSplines.gen_data(n, σ, z->1/(1-0.42log(z)), xmin = 0, xmax = 10)\nscatter(x, y)\nscatter!(x0, y0)\n\ndemo_mono_ss(x, y, λs)","category":"page"},{"location":"examples/monofit/#σ-0.5","page":"Monotone Fitting","title":"σ = 0.5","text":"","category":"section"},{"location":"examples/monofit/","page":"Monotone Fitting","title":"Monotone Fitting","text":"σ = 0.5\nRandom.seed!(seed)\nx, y, x0, y0 = MonotoneSplines.gen_data(n, σ, z->1/(1-0.42log(z)), xmin = 0, xmax = 10)\nscatter(x, y)\nscatter!(x0, y0)\n\ndemo_mono_ss(x, y, λs)","category":"page"},{"location":"examples/monofit/#Logistic-Curve","page":"Monotone Fitting","title":"Logistic Curve","text":"","category":"section"},{"location":"examples/monofit/","page":"Monotone Fitting","title":"Monotone Fitting","text":"λs = exp.(range(-10, 0, length = 100));\nnothing #hide","category":"page"},{"location":"examples/monofit/#σ-0.2","page":"Monotone Fitting","title":"σ = 0.2","text":"","category":"section"},{"location":"examples/monofit/","page":"Monotone Fitting","title":"Monotone Fitting","text":"σ = 0.2\nRandom.seed!(seed)\nx, y, x0, y0 = MonotoneSplines.gen_data(n, σ, z->exp(z)/(1+exp(z)), xmin = -5, xmax = 5)\nscatter(x, y)\nscatter!(x0, y0)\n\ndemo_mono_ss(x, y, λs)","category":"page"},{"location":"examples/monofit/#σ-1.0","page":"Monotone Fitting","title":"σ = 1.0","text":"","category":"section"},{"location":"examples/monofit/","page":"Monotone Fitting","title":"Monotone Fitting","text":"σ = 1.0\nRandom.seed!(seed)\nx, y, x0, y0 = MonotoneSplines.gen_data(n, σ, z->exp(z)/(1+exp(z)), xmin = -5, xmax = 5)\nscatter(x, y)\nscatter!(x0, y0)\n\ndemo_mono_ss(x, y, λs)","category":"page"},{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"Modules = [MonotoneSplines]\nOrder = [:type, :function]","category":"page"},{"location":"api/#MonotoneSplines.Spl","page":"API","title":"MonotoneSplines.Spl","text":"This is a Spl\n\nFields\n\nH: an RObject generated by splines::bs()\nβ: the coefficients for the B-spline.\n\n\n\n\n\n","category":"type"},{"location":"api/#MonotoneSplines.build_model-Union{Tuple{T}, Tuple{AbstractVector{T}, Int64}} where T<:AbstractFloat","page":"API","title":"MonotoneSplines.build_model","text":"build_model(x::AbstractVector{T}, J::Int)\nbuild_model(x::AbstractVector{T}, scaled::Bool)\nbuild_model(x::AbstractVector{T})\n\nReturns\n\nB-spline design matrix B at x for cubic splines\nBnew at new points xnew if it is not nothing\nL = nothing: keep same return list for model of smoothing splines\nJ: number of basis functions, which does not change for cubic splines, so it is only intended for smoothing splines \nmx, rx, idx, idx0: the remaining only for smoothing splines\n\n\n\n\n\n","category":"method"},{"location":"api/#MonotoneSplines.conf_band_width-Tuple{AbstractMatrix}","page":"API","title":"MonotoneSplines.conf_band_width","text":"conf_band_width(CIs::AbstractMatrix)\n\nCalculate width of confidence bands.\n\n\n\n\n\n","category":"method"},{"location":"api/#MonotoneSplines.coverage_prob-Tuple{AbstractMatrix, AbstractVector}","page":"API","title":"MonotoneSplines.coverage_prob","text":"coverage_prob(CIs::AbstractMatrix, y0::AbstractVector)\n\nCalculate coverage probability given n x 2 CI matrix CIs and true vector y0 of size n.\n\n\n\n\n\n","category":"method"},{"location":"api/#MonotoneSplines.cv_mono_ss-Union{Tuple{T}, Tuple{AbstractVector{T}, AbstractVector{T}}, Tuple{AbstractVector{T}, AbstractVector{T}, Any}} where T<:AbstractFloat","page":"API","title":"MonotoneSplines.cv_mono_ss","text":"cv_mono_ss(x::AbstractVector{T}, y::AbstractVector{T}, λs::AbstractVector{T})\n\nCross-validation for monotone fitting with smoothing spline on y ~ x among parameters λs.\n\n\n\n\n\n","category":"method"},{"location":"api/#MonotoneSplines.div_into_folds-Tuple{Int64}","page":"API","title":"MonotoneSplines.div_into_folds","text":"div_into_folds(N::Int; K = 10, seed = 1234)\n\nEqually divide 1:N into K folds with random seed seed. If seed is negative, it is a non-random division, where the i-th fold would be the i-th equidistant range.\n\n\n\n\n\n","category":"method"},{"location":"api/#MonotoneSplines.eval_penalty-Union{Tuple{T}, Tuple{MonotoneSplines.Spl{T}, AbstractVector{T}}} where T<:AbstractFloat","page":"API","title":"MonotoneSplines.eval_penalty","text":"eval_penalty(model::Spl{T}, x::AbstractVector{T})\n\nEvaluate the penalty matrix by R's fda::eval.penalty. To make sure the corresponding design matrix contructed by fda::eval.basis is the same as model.H, it asserts the norm difference should be smaller than sqrt(eps()).\n\n\n\n\n\n","category":"method"},{"location":"api/#MonotoneSplines.fit","page":"API","title":"MonotoneSplines.fit","text":"fit(X, y, paras, method)\n\nparas is either the number of basis functions, or the sequence of interior knots. Return a Spl object.\n\nn = 100\nx = rand(n) * 2 .- 1\ny = x .^3 + randn(n) * 0.01\nres = fit(x, y, 10, \"monotone\")\n\n\n\n\n\n","category":"function"},{"location":"api/#MonotoneSplines.gen_data-Tuple{Int64, Real, Function}","page":"API","title":"MonotoneSplines.gen_data","text":"gen_data(n, σ, f::Union{Function, String}; xmin = -1, xmax = 1, k = 10)\n\nGenerate n data points (xi, yi) from curve f with noise level σ, i.e., yi = f(xi) + N(0, σ^2).\n\nIt returns four vectors, x, y, x0, y0, where\n\nx, y: pair points of length n.\nx0, y0: true curve without noise, represented by k*n points.\n\n\n\n\n\n","category":"method"},{"location":"api/#MonotoneSplines.mono_ss","page":"API","title":"MonotoneSplines.mono_ss","text":"mono_ss(B::AbstractMatrix, y::AbstractVector, L::AbstractMatrix, J::Int, λ::AbstractFloat)\n\nMonotone Fitting with Smoothing Splines given design matrix B and cholesky-decomposed matrix L.\n\n\n\n\n\n","category":"function"},{"location":"api/#MonotoneSplines.predict-Union{Tuple{T}, Tuple{MonotoneSplines.Spl{T}, AbstractVector{T}}} where T<:AbstractFloat","page":"API","title":"MonotoneSplines.predict","text":"predict(model::Spl{T}, xs::AbstractVector{T})\npredict(X::Vector{Float64}, y::Vector{Float64}, J::Int, Xnew::AbstractVector{Float64}, ynew::AbstractVector{Float64}\npredict(X::Vector{Float64}, y::Vector{Float64}, J::Int, Xnew::Vector{Float64}, ynew::Vector{Float64}, σ::Vector{Float64}\n\nMake prediction based on fitted Spl on new points xs. If Xnew is provided, then also returns the prediction error ‖yhat - ynew‖_2^2.\n\n\n\n\n\n","category":"method"},{"location":"#MonotoneSplines.jl","page":"Home","title":"MonotoneSplines.jl","text":"","category":"section"}]
}
